[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement charlotte.lambert@univ-lr.fr. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Charlotte Lambert Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/simulate-individual-movements.html","id":"define-potential-next-positions","dir":"Articles","previous_headings":"","what":"Define potential next positions","title":"Simulate individual movements","text":"potential_position_func() generates bunch potential positions choose next step . Positions generated based provided bearing (Von Mises) step (Gamma) distributions. position, value resource_layer retrieved well distance colony location.","code":"from <- data.frame(Lon = 1, Lat = 2, toto = 5) colony_location <- data.frame(Lon = 2, Lat = 5) cdt <- generate_env_layer(grid = create_grid(), n = 1)$rasters #> [using unconditional Gaussian simulation] potential_position_func(n = 10, from = from,                          colony_location = colony_location, resource_layer = cdt,                          bearing = c(90,10), step = c(4.5, 3)) #>        angle      step        Lon       Lat       env dist_col #> 1  124.54851 1.3176841  1.5797831 0.8167237 0.5954073 4.204329 #> 2   38.59724 1.5516632  1.9668066 3.2136489 0.5617037 1.786659 #> 3  317.19460 1.2513320 -0.2442748 2.1327102 0.6177145 3.641170 #> 4  185.32546 0.7604406  0.2398684 2.0216779 0.6177145 3.459547 #> 5   57.06428 0.5626446  1.4894966 2.2774203 0.5421721 2.770028 #> 6  208.31050 0.9354868  1.5323879 2.7692196 0.5329122 2.279264 #> 7  190.77661 3.2482543 -1.1179400 4.4628207        NA 3.163876 #> 8  180.25368 1.2824369  0.5149331 0.8128377 0.6540463 4.442719 #> 9   22.63236 0.2880789  0.7691424 1.8276799 0.5297902 3.402738 #> 10 111.86924 0.8619650  1.2896450 1.1881568 0.5954073 3.877467 #>    potential_position_id #> 1                      1 #> 2                      2 #> 3                      3 #> 4                      4 #> 5                      5 #> 6                      6 #> 7                      7 #> 8                      8 #> 9                      9 #> 10                    10"},{"path":"/articles/simulate-individual-movements.html","id":"simulate-the-trajectory-of-a-single-central-place-forager","dir":"Articles","previous_headings":"","what":"Simulate the trajectory of a single central-place forager","title":"Simulate individual movements","text":"simulate_trajectory_CPF() simulates full foraging trajectory individual departing colony. individual launches trip given time period (starting_hour, ymd_hms format) starts returning trip either given distance colony (provided max_dist) given time period (max_duration). user can define bearing step distributions departing step, also travelling foraging bouts. default, travelling set directed movement patterns (large steps low variability, low angles low variability) foraging area-restricted movements (short steps low variability, large angles large variability). user can define step duration, time interval positions sampled. position, ten potential subsequent positions randomly sampled using potential_position_func(), movement parameters based activity individual engaged previous step (travelling foraging). environmental suitability (raster layer provided resource_layer) retrieved potential point based geographic coordinates, distance colony computed using rdist function fields package. first four positions track colony departure randomly selected within ten potential points sampled described , using travelling movement. Afterwards, residence time checked every points: residence time considered reached user-defined number previous positions (defined residence_time) fall within residence_radius. residence time reached, potential subsequent positions falling outside residence_radius extracted, next position sampled one highest environmental suitability. potential position falls outside radius (can case radius largely exceeds steps), next position point situated largest distance previous position track. residence time reached, subsequent position randomly sampled among four ten potential points highest values environmental suitability. environmental suitability exceeds given threshold (activity_threshold), individual switches foraging movements; , individual continues travelling. individuals reach threshold distance colony (max_dist), trip duration exceeds given duration (max_duration), start homeward journey. Potential next positions sampled using travelling movement parameters, next positions selected based minimum distance colony. several potential positions meet selection criteria, next step randomly sampled within positions. individual considered back within 0.5 spatial unit (unit depends provided resource layer) colony.","code":"library(ggplot2) library(viridis) #> Loading required package: viridisLite library(tidyterra) #>  #> Attaching package: 'tidyterra' #> The following object is masked from 'package:stats': #>  #>     filter library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(terra) #> terra 1.7.78 colony_location <- data.frame(Lon = 20, Lat = 20) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 25) #> [using unconditional Gaussian simulation]   # launch a travel for a duration of 12h single_traj <- simulate_trajectory_CPF(initial_position = colony_location,                      resource_layer = cdt$rasters,                      starting_hour = ymd_hms(\"2022-08-02 06:00:00\"),                      starting_bearing = c(90,10),                      starting_step = c(4.5, 3),                     travel_bearing = c(0, 20),                      travel_step = c(3, 3),                      foraging_bearing = c(0, 0.5),                      foraging_step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     max_dist = 40,                     step_duration = 5,                     activity_threshold = 0.70,                     max_duration = 720,                     residence_radius = 2,                     residence_time = 20)  # view the trajectory ggplot(single_traj) +   geom_spatraster(data = cdt$rasters, alpha = 0.5) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony_location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\") # look at the density distribution of distance to colony and movement parameters ggplot(single_traj) + geom_density(aes(x = dist_col)) ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = angle)) + facet_wrap(\"activity\") ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/articles/simulate-individual-movements.html","id":"simulate-the-trajectory-of-a-non-central-place-forager","dir":"Articles","previous_headings":"","what":"Simulate the trajectory of a non-central place forager","title":"Simulate individual movements","text":"simulate_trajectory_FR() , individual restrained around colony perform homing bout. addition, individual starts selecting next positions based environmental conditions (checking residence time) third step (5th step central-place foragers).","code":"library(ggplot2) library(viridis) library(tidyterra) library(lubridate) colony_location <- data.frame(Lon = 50, Lat = 50) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 4) #> [using unconditional Gaussian simulation]      single_traj <- simulate_trajectory_FR(initial_position = colony_location,                      resource_layer = cdt$rasters,                      starting_hour = ymd_hms(\"2022-08-02 06:00:00\"),                     starting_bearing = c(90,10),                      starting_step = c(4.5, 3),                     travel_bearing = c(0, 20),                      travel_step = c(3, 3),                      foraging_bearing = c(0, 0.5),                      foraging_step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     step_duration = 1,                     activity_threshold = 0.7,                     max_duration = 2000,                     residence_radius = 1,                     residence_time = 20)  # view the trajectory ggplot(single_traj) +   geom_spatraster(data = cdt$rasters, alpha = 0.5) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony_location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\") # look at the density distribution of distance to colony and movement parameters ggplot(single_traj) + geom_density(aes(x = dist_col)) ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = angle)) + facet_wrap(\"activity\") ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/articles/simulate-survey.html","id":"generate-a-transect-design","dir":"Articles","previous_headings":"","what":"1. Generate a transect design","title":"Simulate survey","text":"design can done dssd package working real-world examples. generate_survey_plan() function presented provide facilities build simple layout. built layout consist parallel transects covering given area virtual environment, spaced given distance segmented given length. layout can either horizontal (default) vertical. design can generated virtual real space, latter case, cautious units (work projected coordinates).","code":"surv <- generate_survey_plan(bbx_xmin = 30, bbx_xmax = 65, bbx_ymin = 30, bbx_ymax = 65,                              start_x = 34, end_x = 60, start_y = 34, end_y = 68,                              space_out_factor = 2, segmentize = TRUE, seg_length = 1,                              buffer = TRUE, buffer_width = 0.2) par(mfrow = c(2,2), mar = c(2.5,2.5,4,0.5)) raster::plot(surv$bbx, axes = TRUE, main = \"bounding box\") plot(sf::st_geometry(surv$transects), axes = TRUE, main = \"transects\") plot(sf::st_geometry(surv$segments), axes = TRUE, main = \"segments\") plot(sf::st_geometry(surv$buffered_segments), axes = TRUE, main = \"buffered seg\")"},{"path":"/articles/simulate-survey.html","id":"assign-a-flight-plan-to-the-survey","dir":"Articles","previous_headings":"","what":"2. Assign a flight plan to the survey","title":"Simulate survey","text":"launching survey, flight plan must set , order segments surveyed must chosen. done assign_flight_plan(), gets segment objects (buffered segments ), vector providing order segment table rows surveyed, survey starting date time, speed aircraft (calculated survey duration single segment) duration transit period two successive transects. function automatically adds one-second gap two consecutive segments avoid overlapping periods.","code":"surv <- generate_survey_plan(bbx_xmin = 30, bbx_xmax = 65, bbx_ymin = 30, bbx_ymax = 65,                              start_x = 34, end_x = 60, start_y = 34, end_y = 68,                              space_out_factor = 2, segmentize = TRUE, seg_length = 1,                              buffer = TRUE, buffer_width = 0.2 )   # assign the time periods to each segment flight_plan <- assign_flight_plan(   sf_segments = surv$buffered_segments,   flight_id = c(1:468),   col_trans_id = \"transect\",   flight_day = \"2022-08-01\",   survey_start_hour = \"06:00:00\",   flight_speed = 160,   intertransect_gap_duration = 60*30 )  # plot to check everything is ok library(ggplot2) ggplot(flight_plan) +     geom_sf(aes(fill = start_time),             color = \"black\", size = 0.2) +     scale_fill_datetime(low = \"#8073ac\", high = \"#fdb863\") +     theme_bw() + theme(panel.grid = element_blank()) +     labs(fill = \"Hour\", limits = c(\"06:00\", \"16:16\"), x = \"x\", y = \"y\")+     coord_sf(xlim = c(0,90), ylim = c(0,90)) ggplot(flight_plan) +     geom_sf(aes(fill = flight_id),             color = \"black\", size = 0.2)"},{"path":"/articles/simulate-survey.html","id":"simulate-survey-on-fixed-individual","dir":"Articles","previous_headings":"","what":"3. Simulate survey on fixed individual","title":"Simulate survey","text":"detection_process() function can used simulate detection process surveyed individuals fixed geographical space, example species distribution generated simul_spat(). strip_transect emulated, individual considered detected distance track line lower width (provided sigma). line-transect emulated, half-normal detection function built using given sigma effective strip half-width. user must define simulation done virtual space (, distances must provided km pts transects objects must projected).","code":"grid <- create_grid() env <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] sp <- suppressWarnings(simul_spat(ref_map = env$rasters$sim1,                  N = 1000,                   n_sim = 1,                   return_wgs_coordinates = FALSE))  pts <- detection_process(pts = sp,                           transects = example_data$survey$segments,                           strip_transect = TRUE,                           sigma = 0.2,                           virtual_space = TRUE,                          seg_id_col = \"seg_id\") #> Strip-transect is used with a width of 0.2 plot(sp$x, sp$y) plot(sf::st_geometry(example_data$survey$segments), col = \"red\", add = TRUE) points(sf::st_drop_geometry(pts[which(pts$detected == 1), c(\"x\", \"y\")]),         pch = 20, col = \"blue\")"},{"path":"/articles/simulate-survey.html","id":"simulate-survey-on-moving-individuals","dir":"Articles","previous_headings":"","what":"4. Simulate survey on moving individuals","title":"Simulate survey","text":"movements population one hand, survey design time periods assigned hand, can match two simulate conduction observation survey. done launch_survey_on_movement() function, scrutinizing whether movement bouts temporally matching segments included within . yes, centroid movement bout included segment, individual considered sighted survey. default strip-transect protocol can changed line-transect protocol, case distance-dependent detection probability additionally computed individual defined whether detected survey. survey relevant, size buffer around segments must carefully chosen generate_survey_plan() mimic maximum distance track line considered possible survey (e.g. 200 m strip-transect survey; 1 km line-transect survey). Note: must large difference size segments movement bouts. function simplifies movement bouts centroids, movement bouts time scale segments (seconds). Otherwise, position approximated define individual sighted (.e., center movement bout) may representative movement individual.","code":"# an example with a small number of individuals survey <- launch_survey_on_movement(   survey_data_buffered = example_data$flight_plan,   survey_data_linear = example_data$survey$segments,   traj_data = example_data$mvmt_data,   line_transect = TRUE, detection_function = \"hn\",   sigma = 0.2 ) #> Applying detection function  # look at the number of sightings summary(survey$effort_table$N_ind_tot) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.00000 0.00000 0.00000 0.03846 0.00000 6.00000  plot(sf::st_drop_geometry(survey$obs_table[, c(\"dist_seg\", \"prob_dist\")]),       xlab = \"distance to the track line\", ylab = \"detection probability\") # all sightings are in a few segments library(ggplot2) ggplot(survey$effort_table) +   geom_sf(data = survey$obs_table,            aes(shape = as.factor(detected)), size = 2) +   geom_sf(aes(fill = N_ind_tot)) +    viridis::scale_fill_viridis(limits = c(1,10),                                na.value = NA, alpha = 0.5)"},{"path":"/articles/simulate-virtual-environment.html","id":"create-the-grid","dir":"Articles","previous_headings":"","what":"Create the grid","title":"Simulate virtual environment","text":"Create grid structuring virtual environment. default, create_grid() creates grid spanning 0 90° longitude latitude, steps 0.5.","code":"grid <- create_grid()"},{"path":"/articles/simulate-virtual-environment.html","id":"generating-environmental-layers","dir":"Articles","previous_headings":"","what":"Generating environmental layers","title":"Simulate virtual environment","text":"generate_env_layer() function creates several environmental layers using Gaussian simulation grid locations. number layers generated set n. generated layers can normalised, returned either data frame data frame raster formats (SpatRast).","code":"grid <- create_grid()  str(generate_env_layer(norm = FALSE, return_rasters = FALSE, grid = grid)) #> [using unconditional Gaussian simulation] #> 'data.frame':    32761 obs. of  4 variables: #>  $ x   : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>  $ y   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ sim1: num  4.7 5.35 4.82 7.42 6.74 ... #>  $ sim2: num  -0.381 -0.575 -0.766 -3.876 -4.276 ...  library(terra) #> terra 1.7.78 plot(generate_env_layer(norm = TRUE, return_rasters = TRUE, grid = grid)$rasters) #> [using unconditional Gaussian simulation]"},{"path":"/articles/simulate-virtual-environment.html","id":"build-the-suitability-layer","dir":"Articles","previous_headings":"","what":"Build the suitability layer","title":"Simulate virtual environment","text":"generate_resource_layer() function permits building suitability layer set environmental layers beta parameters leveraged . mimics basic resource selection function, given environmental layer simply scaled beta parameter (env*beta) several leveraged env layers additively combined. elaborate procedures, see virtualspecies package.","code":"library(terra) # simple example grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5)) str(rsce) #> List of 2 #>  $ dataframe:'data.frame':   32761 obs. of  3 variables: #>   ..$ x          : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ y          : num [1:32761] 90 90 90 90 90 90 90 90 90 90 ... #>   ..$ suitability: num [1:32761] 0.566 0.546 0.56 0.554 0.527 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"] plot(rsce$rasters) # also works when coordinates are not names x,y cdt2 <- generate_env_layer(grid = grid, n = 3)$dataframe |> dplyr::rename(lon = x, lat = y) #> [using unconditional Gaussian simulation] str(generate_resource_layer(env_layers = cdt2, coordinate_fields = c(\"lon\", \"lat\"),                             beta = c(2, -1.5, 3)) ) #> List of 2 #>  $ dataframe:'data.frame':   32761 obs. of  3 variables: #>   ..$ lon        : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ lat        : num [1:32761] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ suitability: num [1:32761] 0.389 0.346 0.37 0.328 0.324 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"]"},{"path":"/articles/simulate-virtual-species.html","id":"create-a-custom-projection","dir":"Articles","previous_headings":"","what":"Create a custom projection","title":"Simulate virtual species","text":"upcoming analyses necessitates working projected environment. virtual environment, must define custom projection. custom_proj().","code":"custom_proj() #> Coordinate Reference System: #>   User input: PROJCS[\"Ad_hoc_handy_wkt2_template_for_laea\", #> GEOGCS[\"WGS 84\", #>     DATUM[\"WGS_1984\", #>         SPHEROID[\"WGS 84\",6378137,298.257223563]], #>     PRIMEM[\"Greenwich\",0], #>     UNIT[\"Degree\",0.0174532925199433]], #> PROJECTION[\"Lambert_Azimuthal_Equal_Area\"], #> PARAMETER[\"latitude_of_center\",0], #> PARAMETER[\"longitude_of_center\",0], #> PARAMETER[\"false_easting\",0], #> PARAMETER[\"false_northing\",0], #> UNIT[\"metre\",1]]  #>   wkt: #> PROJCRS[\"Ad_hoc_handy_wkt2_template_for_laea\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1, #>                     ID[\"EPSG\",9001]]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Lambert Azimuthal Equal Area\", #>             ID[\"EPSG\",9820]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]]]"},{"path":"/articles/simulate-virtual-species.html","id":"simulate-spatial-point-process","dir":"Articles","previous_headings":"","what":"Simulate spatial point process","title":"Simulate virtual species","text":"simul_spat() generates spatial point process reference map, using Inhomogeneous Poisson Point Process spatstat’s IPP. intensity process proportional reference map, final number simulated points provided N. Several runs can simulated time. mark can associated point define group size sighting (mean_group_size parameter). : add id generated obs (done n_sim = 1)","code":"grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5))  # issue a warning: we are in a virtual env and ref_map has no crs out <- simul_spat(ref_map = rsce$rasters, n_sim = 2,                    return_wgs_coordinates = FALSE, N = 1000, mean_group_size = 10) #> Warning in simul_spat(ref_map = rsce$rasters, n_sim = 2, return_wgs_coordinates #> = FALSE, : ref_map has no crs, is that voluntary? The output will have no crs.  # plot the simulated distribution ggplot2::ggplot(out) +   ggplot2::geom_tile(data = rsce$dataframe, ggplot2::aes(x = x, y = y, fill = suitability)) +    ggplot2::geom_sf() + ggplot2::facet_wrap(\"name\") +   viridis::scale_fill_viridis(option = \"H\") # check the generated group size ggplot2::ggplot(out) +    ggplot2::geom_sf(ggplot2::aes(size = size)) + ggplot2::facet_wrap(\"name\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlotte Lambert. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert C (2024). virtualecologist: Tools Simulating Virtual Ecosystems. R package version 0.1.0.","code":"@Manual{,   title = {virtualecologist: Tools For Simulating Virtual Ecosystems},   author = {Charlotte Lambert},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"virtualecologist-","dir":"","previous_headings":"","what":"Tools For Simulating Virtual Ecosystems","title":"Tools For Simulating Virtual Ecosystems","text":"virtualecologist provides facilities simulate virtual ecosystems, underlying environment species distribution scientific surveys. Species can simulated spatial point process using resource layer reference, simulating individual movements (central place free ranging foraging). can navigate articles detailing step: Simulate virtual environment Simulate species spatial point process Simulate species individual movement Simulate observation survey package also includes various functions (%!% normalize())","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools For Simulating Virtual Ecosystems","text":"can install development version virtualecologist following:","code":"# remotes::install_github(\"CLambert1/virtualecologist\")"},{"path":"/index.html","id":"access-help-and-documentation","dir":"","previous_headings":"","what":"Access help and documentation","title":"Tools For Simulating Virtual Ecosystems","text":"dedicated website available https://CLambert1.github.io/virtualecologist, tipping launch_help() console, launch locally installed html documentation web browser.","code":""},{"path":"/reference/assign_flight_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a flight plan to a survey design — assign_flight_plan","title":"Assign a flight plan to a survey design — assign_flight_plan","text":"Assign flight plan survey design","code":""},{"path":"/reference/assign_flight_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a flight plan to a survey design — assign_flight_plan","text":"","code":"assign_flight_plan(   sf_segments,   flight_id,   col_trans_id,   flight_day,   survey_start_hour,   flight_speed,   intertransect_gap_duration )"},{"path":"/reference/assign_flight_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a flight plan to a survey design — assign_flight_plan","text":"sf_segments sf object, segments assign flight plan flight_id numeric vector, giving order segments must surveyed col_trans_id character, column sf_segments storing transect names flight_day character, day survey flight carried (ymd format: \"2022-02-08\") survey_start_hour character, hour survey started (hms format: \"06:00:00\") flight_speed numeric, speed single segment surveyed (km/h) intertransect_gap_duration numeric, duration transit transect (seconds)","code":""},{"path":"/reference/assign_flight_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a flight plan to a survey design — assign_flight_plan","text":"sf table four additional columns (transect_id, flight_id, start_time end_time) informing period segment surveyed","code":""},{"path":[]},{"path":"/reference/assign_flight_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a flight plan to a survey design — assign_flight_plan","text":"","code":"surv <- generate_survey_plan(bbx_xmin = 30, bbx_xmax = 65, bbx_ymin = 30, bbx_ymax = 65,                              start_x = 34, end_x = 60, start_y = 34, end_y = 68,                              space_out_factor = 2, segmentize = TRUE, seg_length = 1,                              buffer = TRUE, buffer_width = 0.2 )   # assign the time periods to each segment flight_plan <- assign_flight_plan(   sf_segments = surv$buffered_segments,   flight_id = c(1:468),   col_trans_id = \"transect\",   flight_day = \"2022-08-01\",   survey_start_hour = \"06:00:00\",   flight_speed = 160,   intertransect_gap_duration = 60*30 )  # plot to check everything is ok library(ggplot2) ggplot(flight_plan) +     geom_sf(aes(fill = start_time),             color = \"black\", size = 0.2) +     scale_fill_datetime(low = \"#8073ac\", high = \"#fdb863\") +     theme_bw() + theme(panel.grid = element_blank()) +     labs(fill = \"Hour\", limits = c(\"06:00\", \"16:16\"), x = \"x\", y = \"y\")+     coord_sf(xlim = c(0,90), ylim = c(0,90))   ggplot(flight_plan) +     geom_sf(aes(fill = flight_id),             color = \"black\", size = 0.2)"},{"path":"/reference/create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the grid of a virtual environment — create_grid","title":"Create the grid of a virtual environment — create_grid","text":"Create grid virtual environment","code":""},{"path":"/reference/create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the grid of a virtual environment — create_grid","text":"","code":"create_grid(   ymin = 0,   ymax = 90,   xmin = 0,   xmax = 90,   step_x = 0.5,   step_y = 0.5 )"},{"path":"/reference/create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the grid of a virtual environment — create_grid","text":"ymin Minimum latitude (default 0) ymax Maximum latitude (default 90) xmin Minimum longitude (default 0) xmax Maximum latitude (default 90) step_x Longitude steps used generate points (default 0.5) step_y Latitude steps used generate points (default 0.5)","code":""},{"path":"/reference/create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the grid of a virtual environment — create_grid","text":"grid dataframe format.","code":""},{"path":"/reference/create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the grid of a virtual environment — create_grid","text":"","code":"grid <- create_grid()"},{"path":"/reference/custom_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a custom projection for virtual environment — custom_proj","title":"Set up a custom projection for virtual environment — custom_proj","text":"Set custom projection virtual environment","code":""},{"path":"/reference/custom_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a custom projection for virtual environment — custom_proj","text":"","code":"custom_proj(lon_0 = 0, lat_0 = 0, x_0 = 0, y_0 = 0)"},{"path":"/reference/custom_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a custom projection for virtual environment — custom_proj","text":"lon_0, lat_0 Longitude Latitude center, defaults 0 x_0, y_0 False easting northing, defaults 0","code":""},{"path":"/reference/custom_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a custom projection for virtual environment — custom_proj","text":"object class crs","code":""},{"path":"/reference/custom_proj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a custom projection for virtual environment — custom_proj","text":"","code":"custom_proj() #> Coordinate Reference System: #>   User input: PROJCS[\"Ad_hoc_handy_wkt2_template_for_laea\", #> GEOGCS[\"WGS 84\", #>     DATUM[\"WGS_1984\", #>         SPHEROID[\"WGS 84\",6378137,298.257223563]], #>     PRIMEM[\"Greenwich\",0], #>     UNIT[\"Degree\",0.0174532925199433]], #> PROJECTION[\"Lambert_Azimuthal_Equal_Area\"], #> PARAMETER[\"latitude_of_center\",0], #> PARAMETER[\"longitude_of_center\",0], #> PARAMETER[\"false_easting\",0], #> PARAMETER[\"false_northing\",0], #> UNIT[\"metre\",1]]  #>   wkt: #> PROJCRS[\"Ad_hoc_handy_wkt2_template_for_laea\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1, #>                     ID[\"EPSG\",9001]]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Lambert Azimuthal Equal Area\", #>             ID[\"EPSG\",9820]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]]]"},{"path":"/reference/detection_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Half-normal detection function — detfunc_hn","title":"Half-normal detection function — detfunc_hn","text":"Half-normal detection function Hazard rate detection function","code":""},{"path":"/reference/detection_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half-normal detection function — detfunc_hn","text":"","code":"detfunc_hn(x, sigma)  detfunc_hr(x, sigma, b)"},{"path":"/reference/detection_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Half-normal detection function — detfunc_hn","text":"x numeric sigma numeric b numeric","code":""},{"path":"/reference/detection_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection process on spatial point process — detection_process","title":"Detection process on spatial point process — detection_process","text":"function can used simulate detection process surveyed individuals fixed geographical space, example species distribution generated simul_spat. strip_transect emulated, individual considered detected distance track line lower width (provided sigma). line-transect emulated, half-normal detection function built using given sigma effective strip half-width. user must define simulation done virtual space (, distances must provided km pts transects objects must projected).","code":""},{"path":"/reference/detection_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection process on spatial point process — detection_process","text":"","code":"detection_process(   pts,   transects,   strip_transect = TRUE,   sigma = NULL,   seg_id_col = NULL,   virtual_space = TRUE )"},{"path":"/reference/detection_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection process on spatial point process — detection_process","text":"pts sf object (points), position individuals surveyed transects sf object (lines), survey layout transects segments (buffered) strip_transect Boolean. strip-transect methodology used? Default TRUE sigma numeric, strip_transect TRUE, width strip width; strip-transect FALSE, effective strip half-width (km, real space) seg_id_col character, name column transects ids stored virtual_space Boolean. survey done virtual space? Default TRUE.","code":""},{"path":"/reference/detection_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection process on spatial point process — detection_process","text":"pts dataframe (sf object) additional columns: distance, distance_km (real space), seg_id (closest transect segment individual) detected (1 individual detected, 0 otherwise)","code":""},{"path":[]},{"path":"/reference/detection_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detection process on spatial point process — detection_process","text":"","code":"grid <- create_grid() env <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] sp <- suppressWarnings(simul_spat(ref_map = env$rasters$sim1,                  N = 1000,                   n_sim = 1,                   return_wgs_coordinates = FALSE))  pts <- detection_process(pts = sp,                           transects = example_data$survey$segments,                           strip_transect = TRUE,                           sigma = 0.2,                           virtual_space = TRUE,                          seg_id_col = \"seg_id\") #> Strip-transect is used with a width of 0.2 plot(sp$x, sp$y) plot(sf::st_geometry(example_data$survey$segments), col = \"red\", add = TRUE) points(sf::st_drop_geometry(pts[which(pts$detected == 1), c(\"x\", \"y\")]),         pch = 20, col = \"blue\")"},{"path":"/reference/example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"example_data — example_data","title":"example_data — example_data","text":"Example data simtools package. data generated functions package.","code":""},{"path":"/reference/example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example_data — example_data","text":"","code":"example_data"},{"path":"/reference/example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example_data — example_data","text":"data frame  rows  variables: env_resource_layers environmental resource layers, dataframe (output generate_env_layer) mvmt_data data.frame trajectories 500 individuals (output simulate_trajectory_CPF) survey list survey plan various formats (output generate_survey_plan) flight_plan sf,data.frame survey plan flight plan assigned (output assign_flight_plan )","code":""},{"path":"/reference/example_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"example_data — example_data","text":"Source","code":""},{"path":"/reference/generate_env_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random environmental layers — generate_env_layer","title":"Generating random environmental layers — generate_env_layer","text":"Generating random environmental layers","code":""},{"path":"/reference/generate_env_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating random environmental layers — generate_env_layer","text":"","code":"generate_env_layer(   seed = 2,   grid,   n = 2,   beta = 1,   norm = TRUE,   return_rasters = TRUE )"},{"path":"/reference/generate_env_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random environmental layers — generate_env_layer","text":"seed Value feed set.seed (default 2) grid Grid virtual space, generated create_grid n Number layers generated (default 2) beta beta value forwarded gstat (default 1) norm resulting layers normalized? return_rasters function returns SpatRast addition data frame?","code":""},{"path":"/reference/generate_env_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random environmental layers — generate_env_layer","text":"Returns data frame simulated environmental values, well SpatRast return_rasters = TRUE","code":""},{"path":[]},{"path":"/reference/generate_env_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random environmental layers — generate_env_layer","text":"","code":"grid <- create_grid()  str(generate_env_layer(norm = FALSE, return_rasters = FALSE, grid = grid)) #> [using unconditional Gaussian simulation] #> 'data.frame':\t32761 obs. of  4 variables: #>  $ x   : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>  $ y   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ sim1: num  4.7 5.35 4.82 7.42 6.74 ... #>  $ sim2: num  -0.381 -0.575 -0.766 -3.876 -4.276 ...  library(terra) #> terra 1.7.78 plot(generate_env_layer(norm = TRUE, return_rasters = TRUE, grid = grid)$rasters) #> [using unconditional Gaussian simulation]"},{"path":"/reference/generate_resource_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource selection function — generate_resource_layer","title":"Resource selection function — generate_resource_layer","text":"Resource selection function","code":""},{"path":"/reference/generate_resource_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource selection function — generate_resource_layer","text":"","code":"generate_resource_layer(   beta,   env_layers,   coordinate_fields = c(\"x\", \"y\"),   norm = TRUE,   return_rasters = TRUE )"},{"path":"/reference/generate_resource_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource selection function — generate_resource_layer","text":"beta beta values multiply environmental layers (must much beta layers) env_layers Environmental layers build resource . Can either data frame (including map coordinates environmental layer values) SpatRast. coordinate_fields env_layers data frame, fields corresponding map coordinates (e.g. c(\"x\", \"y\"), default) norm resource layer normalized? return_rasters function returns resource SpatRast addition data frame?","code":""},{"path":"/reference/generate_resource_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resource selection function — generate_resource_layer","text":"Returns data frame suitability layer, well SpatRast return_rasters = TRUE","code":""},{"path":[]},{"path":"/reference/generate_resource_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource selection function — generate_resource_layer","text":"","code":"library(terra) # simple example grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5)) str(rsce) #> List of 2 #>  $ dataframe:'data.frame':\t32761 obs. of  3 variables: #>   ..$ x          : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ y          : num [1:32761] 90 90 90 90 90 90 90 90 90 90 ... #>   ..$ suitability: num [1:32761] 0.566 0.546 0.56 0.554 0.527 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"] plot(rsce$rasters)   # also works when coordinates are not names x,y cdt2 <- generate_env_layer(grid = grid, n = 3)$dataframe |> dplyr::rename(lon = x, lat = y) #> [using unconditional Gaussian simulation] str(generate_resource_layer(env_layers = cdt2, coordinate_fields = c(\"lon\", \"lat\"),                             beta = c(2, -1.5, 3)) ) #> List of 2 #>  $ dataframe:'data.frame':\t32761 obs. of  3 variables: #>   ..$ lon        : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ lat        : num [1:32761] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ suitability: num [1:32761] 0.389 0.346 0.37 0.328 0.324 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"]"},{"path":"/reference/generate_survey_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a transect survey design — generate_survey_plan","title":"Generate a transect survey design — generate_survey_plan","text":"function builds simple transect design layout, consisting parallel transects covering given area virtual environment, spaced given distance. layout can either horizontal (default) vertical. transects can segmentized given length, transects segments can buffered.","code":""},{"path":"/reference/generate_survey_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a transect survey design — generate_survey_plan","text":"","code":"generate_survey_plan(   bbx_xmin,   bbx_xmax,   bbx_ymin,   bbx_ymax,   start_x,   end_x,   start_y,   end_y,   space_out_factor,   type = \"horizontal\",   segmentize = FALSE,   merge_last_seg = FALSE,   seg_length,   buffer = FALSE,   buffer_width )"},{"path":"/reference/generate_survey_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a transect survey design — generate_survey_plan","text":"bbx_xmin, bbx_xmax, bbx_ymin, bbx_ymax numeric. Limits bounding box transects generated start_x, end_x numeric. Start end x coordinates transects start_y, end_y numeric. Start end y coordinates transects space_out_factor numeric. Number space units transects type character. Either \"horizontal\" (default) \"vertical segmentize Boolean. TRUE, transects cut smaller segments. Default FALSE. merge_last_seg Boolean. last segment transect merged previous one? Default FALSE seg_length numeric. Segment length. buffer Boolean. buffer drawn around transects segments? segmentize TRUE, buffers drawn around segments, segmentize FALSE, drawn around transects. buffer_width numeric. Width buffer side segments transects.","code":""},{"path":"/reference/generate_survey_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a transect survey design — generate_survey_plan","text":"named list.","code":""},{"path":[]},{"path":"/reference/generate_survey_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a transect survey design — generate_survey_plan","text":"","code":"surv <- generate_survey_plan(bbx_xmin = 30, bbx_xmax = 65, bbx_ymin = 30, bbx_ymax = 65,                              start_x = 34, end_x = 60, start_y = 34, end_y = 68,                              space_out_factor = 2, segmentize = TRUE, seg_length = 1,                              buffer = TRUE, buffer_width = 0.2) par(mfrow = c(2,2), mar = c(2.5,2.5,4,0.5)) raster::plot(surv$bbx, axes = TRUE, main = \"bounding box\") plot(sf::st_geometry(surv$transects), axes = TRUE, main = \"transects\") plot(sf::st_geometry(surv$segments), axes = TRUE, main = \"segments\") plot(sf::st_geometry(surv$buffered_segments), axes = TRUE, main = \"buffered seg\")"},{"path":[]},{"path":"/reference/grapes-not-in-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in — %!in%","text":"","code":"x %!in% y"},{"path":"/reference/grapes-not-in-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in — %!in%","text":"x, y Numeric vectors","code":""},{"path":"/reference/grapes-not-in-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not in — %!in%","text":"Boolean","code":""},{"path":"/reference/grapes-not-in-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not in — %!in%","text":"","code":"1 %!in% c(2:3) #> [1] TRUE  2 %!in% c(2:3) #> [1] FALSE"},{"path":"/reference/launch_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch help for the package — launch_help","title":"Launch help for the package — launch_help","text":"Launch help package Launch help package","code":""},{"path":"/reference/launch_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch help for the package — launch_help","text":"","code":"launch_help()  launch_help()"},{"path":"/reference/launch_help.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch help for the package — launch_help","text":"website website","code":""},{"path":"/reference/launch_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch help for the package — launch_help","text":"","code":"launch_help() launch_help()"},{"path":"/reference/launch_survey_on_movement.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a survey on a population of moving individuals — launch_survey_on_movement","title":"Launch a survey on a population of moving individuals — launch_survey_on_movement","text":"function identifies individuals detected standardised survey spatial temporal matching segments movement bouts individuals. default behaviour emulates strip-transect survey, considering individuals falling within strip around surveyed segments detected, line-transect methodology can also emulated setting line-transect TRUE. case, actual detection individuals conditioned distance track line (probability detection computed using either half-normal hazard rate detection functions).","code":""},{"path":"/reference/launch_survey_on_movement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a survey on a population of moving individuals — launch_survey_on_movement","text":"","code":"launch_survey_on_movement(   survey_data_buffered,   survey_data_linear,   traj_data,   track_id_col = \"ind_id\",   seg_id_col = \"seg_id\",   line_transect = FALSE,   sigma = 0.2,   b = 1,   detection_function = \"hn\" )"},{"path":"/reference/launch_survey_on_movement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a survey on a population of moving individuals — launch_survey_on_movement","text":"survey_data_buffered sf object, buffered segments provided generate_survey_plan processed assign_flight_plan. Matching sightings defined individual movement bouts falling within buffer around segments, careful buffer length. survey_data_linear sf object, non-buffered segments (LINESTRING type) provided generate_survey_plan, used compute distance trac line traj_data data.frame individual movements, provided simulate_trajectory_CPF simulate_trajectory_FR track_id_col character, column name storing individual id traj_data seg_id_col character, column name storing segment id survey_data line_transect Boolean. detection process follow line-transect methodology? Default FALSE (strip-transect setting). TRUE, sightings spatially matched (falling inside segment buffers) detection probability calculated based distance track line. sigma numeric, line_transect TRUE, defines effective strip half-width used detection functions (km) b numeric, detection_function = \"hr\", b value passed detection_hr function detection_function character, half-normal (\"hn\") hasard rate (\"hr\") detection function, default \"hn\"","code":""},{"path":"/reference/launch_survey_on_movement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a survey on a population of moving individuals — launch_survey_on_movement","text":"list included effort table (survey_data number individuals sighted per segment \"N_ind_tot\") obs_table (summarising movement bouts detected survey, centroid coordinates). line_transect TRUE, obs_table includes two supplementary columns describing probability individual detected based distance track line (\"prob_dist\") whether detected (\"detected\"), effort table includes additional column (\"N_ind_detected\") summarising number individuals detected based distance track line.","code":""},{"path":[]},{"path":"/reference/launch_survey_on_movement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a survey on a population of moving individuals — launch_survey_on_movement","text":"","code":"# an example with a small number of individuals survey <- launch_survey_on_movement(   survey_data_buffered = example_data$flight_plan,   survey_data_linear = example_data$survey$segments,   traj_data = example_data$mvmt_data,   line_transect = TRUE, detection_function = \"hn\",   sigma = 0.2 ) #> Applying detection function  # look at the number of sightings summary(survey$effort_table$N_ind_tot) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.00000 0.00000 0.00000 0.03846 0.00000 6.00000   plot(sf::st_drop_geometry(survey$obs_table[, c(\"dist_seg\", \"prob_dist\")]),       xlab = \"distance to the track line\", ylab = \"detection probability\")   # all sightings are in a few segments library(ggplot2) ggplot(survey$effort_table) +   geom_sf(data = survey$obs_table,            aes(shape = as.factor(detected)), size = 2) +   geom_sf(aes(fill = N_ind_tot)) +    viridis::scale_fill_viridis(limits = c(1,10),                                na.value = NA, alpha = 0.5)"},{"path":"/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a vector — normalize","title":"Normalize a vector — normalize","text":"Normalize vector Normalize vector","code":""},{"path":"/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a vector — normalize","text":"","code":"normalize(cov)  normalize(cov)"},{"path":"/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a vector — normalize","text":"cov vector","code":""},{"path":"/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a vector — normalize","text":"vector vector","code":""},{"path":"/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize a vector — normalize","text":"","code":"normalize(c(1:5)) #> [1] 0.00 0.25 0.50 0.75 1.00 normalize(c(1:5)) #> [1] 0.00 0.25 0.50 0.75 1.00"},{"path":"/reference/potential_position_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify potential next positions — potential_position_func","title":"Identify potential next positions — potential_position_func","text":"function generates bunch potential positions choose next step . Positions generated based provided bearing (Von Mises distribution) step distributions (Gamma distribution). position, value resource_layer retrieved well distance colony location.","code":""},{"path":"/reference/potential_position_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify potential next positions — potential_position_func","text":"","code":"potential_position_func(   n,   bearing,   step,   from,   colony_location,   resource_layer )"},{"path":"/reference/potential_position_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify potential next positions — potential_position_func","text":"n Numeric, number potential positions generate bearing Numeric vector, mu kappa passed randomdir step Numeric, shape rate passed randomdist data.frame including Lon Lat fields stepID point origin colony_location data.frame vector lon lat position colony resource_layer SpatRaster, suitability resource layer used sort potential position (single layer)","code":""},{"path":"/reference/potential_position_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify potential next positions — potential_position_func","text":"data.frame n potential positions point origin, informed value provided environmental layer corresponding well distance colony.","code":""},{"path":[]},{"path":"/reference/potential_position_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify potential next positions — potential_position_func","text":"","code":"from <- data.frame(Lon = 1, Lat = 2, toto = 5) colony_location <- data.frame(Lon = 2, Lat = 5) cdt <- generate_env_layer(grid = create_grid(), n = 1)$rasters #> [using unconditional Gaussian simulation] potential_position_func(n = 10, from = from,                          colony_location = colony_location, resource_layer = cdt,                          bearing = c(90,10), step = c(4.5, 3)) #>        angle      step        Lon       Lat       env dist_col #> 1  124.54851 1.3176841  1.5797831 0.8167237 0.5954073 4.204329 #> 2   38.59724 1.5516632  1.9668066 3.2136489 0.5617037 1.786659 #> 3  317.19460 1.2513320 -0.2442748 2.1327102 0.6177145 3.641170 #> 4  185.32546 0.7604406  0.2398684 2.0216779 0.6177145 3.459547 #> 5   57.06428 0.5626446  1.4894966 2.2774203 0.5421721 2.770028 #> 6  208.31050 0.9354868  1.5323879 2.7692196 0.5329122 2.279264 #> 7  190.77661 3.2482543 -1.1179400 4.4628207        NA 3.163876 #> 8  180.25368 1.2824369  0.5149331 0.8128377 0.6540463 4.442719 #> 9   22.63236 0.2880789  0.7691424 1.8276799 0.5297902 3.402738 #> 10 111.86924 0.8619650  1.2896450 1.1881568 0.5954073 3.877467 #>    potential_position_id #> 1                      1 #> 2                      2 #> 3                      3 #> 4                      4 #> 5                      5 #> 6                      6 #> 7                      7 #> 8                      8 #> 9                      9 #> 10                    10"},{"path":"/reference/randomdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Return random direction angles — randomdir","title":"Return random direction angles — randomdir","text":"Return random direction angles","code":""},{"path":"/reference/randomdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return random direction angles — randomdir","text":"","code":"randomdir(n, mu, kappa)"},{"path":"/reference/randomdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return random direction angles — randomdir","text":"n number observations. mu mean direction distribution circular object. kappa numeric, sd parameter","code":""},{"path":"/reference/randomdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return random direction angles — randomdir","text":"n random angles","code":""},{"path":[]},{"path":"/reference/randomdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Return random step lengths — randomdist","title":"Return random step lengths — randomdist","text":"Return random step lengths","code":""},{"path":"/reference/randomdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return random step lengths — randomdist","text":"","code":"randomdist(n, shape, rate)"},{"path":"/reference/randomdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return random step lengths — randomdist","text":"n number observations. length(n) > 1, length     taken number required. shape numeric, must positive rate alternative way specify scale.","code":""},{"path":"/reference/randomdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return random step lengths — randomdist","text":"n random step lengths","code":""},{"path":[]},{"path":"/reference/segmentize.html","id":null,"dir":"Reference","previous_headings":"","what":"Author: Auriane Virgili — CreateSegment","title":"Author: Auriane Virgili — CreateSegment","text":"Author: Auriane Virgili","code":""},{"path":"/reference/segmentize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Author: Auriane Virgili — CreateSegment","text":"","code":"CreateSegment(coords, from, to)  CreateSegments(coords, length = 0, n.parts = 0)  MergeLast(lst)  SegmentSpatialLines(sl, length = 0, n.parts = 0, merge.last = FALSE)  Merge(segments)"},{"path":"/reference/segmentize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Author: Auriane Virgili — CreateSegment","text":"coords numeric numeric numeric length length segmentize n.parts number parts cut transect lst list sl spatial line object merge.last last bit merged previous one? segments sf object","code":""},{"path":"/reference/segmentize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Author: Auriane Virgili — CreateSegment","text":"sf object","code":""},{"path":"/reference/simul_spat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate spatial point process — simul_spat","title":"Simulate spatial point process — simul_spat","text":"Generates spatial point process reference map, using Inhomogeneous Poisson Point Process spatstat IPP. intensity process proportional reference map, final number individuals population provided N. Several runs can simulated time. working real environment, reference map must projected.","code":""},{"path":"/reference/simul_spat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate spatial point process — simul_spat","text":"","code":"simul_spat(   ref_map,   N,   seed = NULL,   n_sim = 1,   return_wgs_coordinates = TRUE,   drop_geometry = FALSE,   mean_group_size = NULL )"},{"path":"/reference/simul_spat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate spatial point process — simul_spat","text":"ref_map Reference map, must projected N Number individuals final population seed Numeric n_sim Number simulation run return_wgs_coordinates Boolean. function returns points WGS coordinates? Recommended working real environment drop_geometry Boolean. geometry dropped returned object? Defaults FALSE, TRUE function return data.frame sf object. mean_group_size mean group size generate mark. Set NULL mark wanted.","code":""},{"path":"/reference/simul_spat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate spatial point process — simul_spat","text":"Returns sf object","code":""},{"path":[]},{"path":"/reference/simul_spat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate spatial point process — simul_spat","text":"","code":"grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5))  # issue a warning: we are in a virtual env and ref_map has no crs out <- simul_spat(ref_map = rsce$rasters, n_sim = 2,                    return_wgs_coordinates = FALSE, N = 1000, mean_group_size = 10) #> Warning: ref_map has no crs, is that voluntary? The output will have no crs.  # plot the simulated distribution ggplot2::ggplot(out) +   ggplot2::geom_tile(data = rsce$dataframe, ggplot2::aes(x = x, y = y, fill = suitability)) +    ggplot2::geom_sf() + ggplot2::facet_wrap(\"name\") +   viridis::scale_fill_viridis(option = \"H\")   # check the generated group size ggplot2::ggplot(out) +    ggplot2::geom_sf(ggplot2::aes(size = size)) + ggplot2::facet_wrap(\"name\")"},{"path":"/reference/simulate_trajectory_CPF.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate individual trajectory — simulate_trajectory_CPF","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"Simulate trajectory central-place forager given time period.","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"","code":"simulate_trajectory_CPF(   initial_position,   resource_layer,   starting_hour,   starting_bearing = c(90, 10),   starting_step = c(4.5, 3),   travel_bearing = c(0, 20),   travel_step = c(3, 3),   foraging_bearing = c(0, 0.5),   foraging_step = c(1, 3),   minx = 0,   maxx = 90,   miny = 0,   maxy = 90,   max_dist = 40,   step_duration = 1,   activity_threshold = 0.5,   max_duration = 720,   residence_radius = NULL,   residence_time = NULL )"},{"path":"/reference/simulate_trajectory_CPF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"initial_position data.frame containing coordinates point individual starts (Lon, Lat fields), considered colony location resource_layer SpatRaster resource layer starting_hour Starting hour starting_bearing Bearing departing colony (mu, kappa) starting_step Step length departing colony (mu, kappa) travel_bearing Bearing previous step traveling (mu, kappa) travel_step Distance previous step traveling (scale, rate) foraging_bearing Bearing previous step foraging/searching (mu, kappa) foraging_step Distance previous step foraging (scale, rate) minx Minimum longitude bounding box simulate trajectory within maxx Maximum longitude bounding box simulate trajectory within miny Minimum latitude bounding box simulate trajectory within maxy Maximum latitude bounding box simulate trajectory within max_dist Distance threshold value individual starts homing bout step_duration Duration step length, minutes (defaults 1), defines sampling interval activity_threshold Threshold environmental value defining individual switches travelling foraging movement max_duration Total duration full trip, minutes (defaults 720, 12h) residence_radius distance testing residence time (system unit). value used draw radius around position evaluate residence time. one residence_radius residence_time NULL (, default), residence time constraint applied. residence_time time animal allowed spend area (residence time). Expressed number steps (take care provide number step consistent step_duration). one residence_radius residence_time NULL (, default), residence time constraint applied.","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"data.frame","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"individual launches trip given time period (starting.hour, ymd_hms format) starts returning trip either given distance colony (provided max_dist) given time period (max_duration). user can define bearing step distributions departing step, also travelling foraging bouts. default, travelling set directed movement patterns (large steps low variability, low angles low variability) foraging area-restricted movements (short steps low variability, large angles large variability). user can define step duration, time  interval positions sampled. position, ten potential subsequent positions randomly sampled using potential_position_func, movement parameters based activity individual engaged previous step (travelling foraging). environmental suitability (raster layer provided resource_layer) retrieved potential point based geographic coordinates, distance colony computed using rdist function fields package. first four positions track colony departure randomly selected within ten potential points sampled described , using travelling movement. Afterwards, residence time checked every points: residence time considered reached user-defined number previous positions (defined residence_time) fall within residence_radius. residence time reached, potential subsequent positions falling outside residence_radius extracted, next position sampled one highest environmental suitability. potential position falls outside radius (can case radius largely exceeds steps), next position point situated largest distance previous position track. residence time reached, subsequent position randomly sampled among four ten potential points highest values environmental suitability. environmental suitability selected subsequent position exceeds given threshold (activity_threshold), individual switches foraging movements; , individual continues travelling. individuals reach threshold distance colony (max_dist), trip duration exceeds given duration (max_duration), start homeward journey. Potential next positions sampled using travelling movement parameters, next positions selected based minimum distance colony. several potential positions meet selection criteria, next step randomly sampled within positions. individual considered back within 0.5 spatial unit (unit depends provided resource layer) colony.","code":""},{"path":[]},{"path":"/reference/simulate_trajectory_CPF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"","code":"library(ggplot2) library(viridis) #> Loading required package: viridisLite library(tidyterra) #>  #> Attaching package: ‘tidyterra’ #> The following object is masked from ‘package:stats’: #>  #>     filter library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:terra’: #>  #>     intersect, union #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(terra) colony_location <- data.frame(Lon = 20, Lat = 20) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 25) #> [using unconditional Gaussian simulation]   # launch a travel for a duration of 12h single_traj <- simulate_trajectory_CPF(initial_position = colony_location,                      resource_layer = cdt$rasters,                      starting_hour = ymd_hms(\"2022-08-02 06:00:00\"),                      starting_bearing = c(90,10),                      starting_step = c(4.5, 3),                     travel_bearing = c(0, 20),                      travel_step = c(3, 3),                      foraging_bearing = c(0, 0.5),                      foraging_step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     max_dist = 40,                     step_duration = 5,                     activity_threshold = 0.70,                     max_duration = 720,                     residence_radius = 2,                     residence_time = 20)  # view the trajectory ggplot(single_traj) +   geom_spatraster(data = cdt$rasters, alpha = 0.5) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony_location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\")    # look at the density distribution of distance to colony and movement parameters ggplot(single_traj) + geom_density(aes(x = dist_col))  ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = angle)) + facet_wrap(\"activity\")  ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/reference/simulate_trajectory_FR.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate individual trajectory — simulate_trajectory_FR","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"Simulate trajectory free ranging individual, given time period. function works similarly simulate_trajectory_CPF individual restrained around colony perform homing bout. , potential_position_func() considers initial position colony, dist_col field output corresponds distance starting point. individual starts selecting next positions based environmental conditions (checking residence time) third step (5th step central-place foragers).","code":""},{"path":"/reference/simulate_trajectory_FR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"","code":"simulate_trajectory_FR(   initial_position,   resource_layer,   starting_hour,   starting_bearing = c(90, 10),   starting_step = c(4.5, 3),   travel_bearing = c(0, 20),   travel_step = c(3, 3),   foraging_bearing = c(0, 0.5),   foraging_step = c(1, 3),   minx = 0,   maxx = 90,   miny = 0,   maxy = 90,   step_duration = 1,   activity_threshold = 0.5,   max_duration = 720,   residence_radius = NULL,   residence_time = NULL )"},{"path":"/reference/simulate_trajectory_FR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"initial_position data.frame containing coordinates point individual starts (Lon, Lat fields) resource_layer SpatRaster resource layer starting_hour Starting hour starting_bearing Bearing departing colony (mu, kappa) starting_step Step length departing colony (mu, kappa) travel_bearing Bearing previous step traveling (mu, kappa) travel_step Distance previous step traveling (scale, rate) foraging_bearing Bearing previous step foraging/searching (mu, kappa) foraging_step Distance previous step foraging (scale, rate) minx Minimum longitude bounding box simulate trajectory within maxx Maximum longitude bounding box simulate trajectory within miny Minimum latitude bounding box simulate trajectory within maxy Maximum latitude bounding box simulate trajectory within step_duration Duration step length, minutes (defaults 1), defines sampling interval activity_threshold Threshold environmental value defining individual switches travelling foraging movement max_duration Total duration full trip, minutes (defaults 720, 12h) residence_radius distance testing residence time (system unit). value used draw radius around position evaluate residence time. one residence_radius residence_time NULL (, default), residence time constraint applied. residence_time time animal allowed spend area (residence time). Expressed number steps (take care provide number step consistent step_duration). one residence_radius residence_time NULL (, default), residence time constraint applied.","code":""},{"path":"/reference/simulate_trajectory_FR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"data.frame","code":""},{"path":[]},{"path":"/reference/simulate_trajectory_FR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"","code":"library(ggplot2) library(viridis) library(tidyterra) library(lubridate) colony_location <- data.frame(Lon = 50, Lat = 50) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 4) #> [using unconditional Gaussian simulation]      single_traj <- simulate_trajectory_FR(initial_position = colony_location,                      resource_layer = cdt$rasters,                      starting_hour = ymd_hms(\"2022-08-02 06:00:00\"),                     starting_bearing = c(90,10),                      starting_step = c(4.5, 3),                     travel_bearing = c(0, 20),                      travel_step = c(3, 3),                      foraging_bearing = c(0, 0.5),                      foraging_step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     step_duration = 1,                     activity_threshold = 0.7,                     max_duration = 2000,                     residence_radius = 1,                     residence_time = 20)  # view the trajectory ggplot(single_traj) +   geom_spatraster(data = cdt$rasters, alpha = 0.5) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony_location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\")    # look at the density distribution of distance to colony and movement parameters ggplot(single_traj) + geom_density(aes(x = dist_col))  ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = angle)) + facet_wrap(\"activity\")  ggplot(single_traj |> subset(activity %in% c(\"forage\", \"travel\"))) +    geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/reference/virtualecologist-package.html","id":null,"dir":"Reference","previous_headings":"","what":"virtualecologist: Tools For Simulating Virtual Ecosystems — virtualecologist-package","title":"virtualecologist: Tools For Simulating Virtual Ecosystems — virtualecologist-package","text":"Includes suite tools simulate virtual ecological systems, environment, animals surveys.","code":""},{"path":"/reference/virtualecologist-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"virtualecologist: Tools For Simulating Virtual Ecosystems — virtualecologist-package","text":"Maintainer: Charlotte Lambert charlotte.lambert@univ-lr.fr (ORCID)","code":""},{"path":"/news/index.html","id":"virtualecologist-010","dir":"Changelog","previous_headings":"","what":"virtualecologist 0.1.0","title":"virtualecologist 0.1.0","text":"rename package","code":""}]
